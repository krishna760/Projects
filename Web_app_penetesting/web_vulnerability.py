import requests
from bs4 import BeautifulSoup
import sys
from urllib.parse import urljoin, urlparse
from colorama import init, Fore

init()
green = Fore.GREEN
red = Fore.RED
reset = Fore.RESET

session = requests.Session()
session.headers['User-Agent'] = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebkit/547.36"
session.headers["Content-type"] = "application/x-www-form-urlencoded"

def get_form(url):
    soup = BeautifulSoup(session.get(url).content ,'html.parser')
    return soup.find_all("form")

def form_details(form):
    detailsOfForms = {}
    try:
        action = form.attrs.get("action").lower()
        method = form.attrs.get("method", "get").lower()

        inputs = []
        for input_tag in form.find_all("input"):
            input_type = input_tag.attrs.get("type")
            input_name = input_tag.attrs.get("name")
            input_value = input_tag.attrs.get("value", "")
            inputs.append({"type":input_type, "name":input_name, "value":input_value})
        
        detailsOfForms['action'] = action
        detailsOfForms['method'] = method
        detailsOfForms['inputs'] = inputs
    except:
        pass
    return detailsOfForms
    
def submit_form(details, url, data, payload=''):
    global res
    try:
        url = urljoin(url, details["action"])
        
        if details['method'] == 'post':
            res = session.post(url, data=data)
        else:
            req = session.get(url, params=data)
    except:
            res = session.get(url)

    return res

def sqli_vulnerable(res):
    if "?" in url:
        param = url.split('=')[0]+"=\'>\""
        res = requests.get(param)
    sqli_vuln_errors = ['You have an error in your SQL syntax', 'quoted string not properly sanitized', 'unclosed quation marks', 'mysql_fetch_array']
    for error in sqli_vuln_errors:
        if error in res.content.decode():
            return True
    return False


def sqli_scan(url):

    forms = get_form(url)
    print(f"[+] Found forms in {len(forms), url}")
    if len(forms) == 0:
        return
    for form in forms:
        details = form_details(form)

        sqli_payload_list = ['\',\"']
        for payload in sqli_payload_list:
            data = {}
            for input_tag in details['inputs']:
                if input_tag['type'] == 'hidden' or input_tag['value']:
                    data[input_tag['name']] = input_tag['value'] + payload
                elif input_tag['type'] != 'submit':
                    data[input_tag['name']] = f"test{payload}"

            res = submit_form(details, url, data, payload)
            if sqli_vulnerable(res):
                print(f"{red}[+] SQL Injection found on {url}{reset}")
            else:
                pass

def xss_scan(url):
    forms = get_form(url)
    print(f"[+] Found forms in {len(forms), url}")
    if len(forms) == 0:
        return
    js_payload = "<script>alert('XSS)</script>"
    for form in forms:
        details = form_details(form)
        data = {}
        for input_tag in details['inputs']:
            if input_tag['type'] == 'hidden' or input_tag['value']:
                data[input_tag['name']] = input_tag['value'] + js_payload
            elif input_tag['type'] != 'submit':
                data[input_tag['name']] = f"test{js_payload}"


        res = submit_form(details, url, data, js_payload)
        if js_payload in res.content.decode():
            print(f"{green}[+] Cross-site Scripting found on {url}{reset}")
        else:
            pass

if __name__ == "__main__":
     url = sys.argv[1] #give http://testphp.vulnweb.com/login.php
     sqli_scan(url)
     xss_scan(url)
